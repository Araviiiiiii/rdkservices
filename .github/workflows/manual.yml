name: Deploy GitHub Repository

on:
  push:
    branches: [ main, 'sprint/**', 'release/**' ]
  pull_request:
    branches: [ main, 'sprint/**', 'release/**' ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3  # Latest GitHub Actions checkout action

      - name: Clone repository (if necessary)
        run: |
          if [ ! -d /home/runner/repository ]; then
            # Clone repository only if it doesn't exist
            git clone git@github.com:sky-uk/Emulator_Manifest.git /home/runner/repository
          fi

      - name: Set workspace to repository directory
        working-directory: /home/runner/repository/Emulator_Manifest

      - name: Install dependencies (if applicable)
        run: |
          # Modify and replace with your actual commands to install dependencies
          if [ -f package.json ]; then
            npm install
          elif [ -f Gemfile ]; then
            bundle install
          # Add similar checks for other package managers or requirements
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install jsonref
      - run: sudo apt-get install cmake

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.22.1'

      - name: Install packages
        run: >
          sudo apt update
          &&
          sudo apt install -y libsqlite3-dev libcurl4-openssl-dev valgrind lcov clang libsystemd-dev libboost-all-dev libwebsocketpp-dev meson libcunit1 libcunit1-dev
          sudo apt install -y git

          pip install flake8
          pip install flask
          sudo pip install peru
          sudo apt-get install -y libtool
          suod apt install -y autoconf
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa -y
          sudo apt update
          sudo apt install -y g++-9 gcc-9
          sudo apt-get install -y libglib2.0-dev
          sudo apt-get install -y libdbus-1-dev
          sudo apt-get install -y curl

      - name: Run build script
        run: |
          bash build.sh
          if [ $? -ne 0 ]; then
            echo "Build failed with exit code: $?."
            exit 1  # Fail the job if build script exits with non-zero code
          fi

      - name: Run run script
        run: |
          bash run.sh
          if [ $? -ne 0 ]; then
            echo "Deployment failed with exit code: $?."
            exit 1  # Fail the job if run script exits with non-zero code
          fi

      - name: Send notification with test report content
        uses: actions/github-script@v11
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { core } = require('@actions/core');
            const reportContent = fs.readFileSync('test_report_for_notification.txt', 'utf-8');
            // Send notification with test report content using core.notice
            core.notice('Test Report:\n\n' + reportContent);

            // Optionally, you can also use core.error for notifications indicating failure
            if (reportContent.includes("Test failed")) {
              core.error('**Tests failed!** See the attached test report for details.');
            } else {
              core.notice('**Tests passed!**');
            }
            // Use the "core.notice" or "core.error" functions to send the notification with
            // the formatted test report content.
            // ...


     
